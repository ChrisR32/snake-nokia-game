{"ast":null,"code":"import _toConsumableArray from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chris/Downloads/react-hour-projects-master/snake-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chris/Downloads/react-hour-projects-master/snake-game/src/App.js\";\nimport React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\nimport Phone from './phoneColor';\n\nvar getRandomCoordinates = function getRandomCoordinates() {\n  var min = 1;\n  var max = 98;\n  var x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  var y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nvar initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialState;\n\n    _this.onKeyDown = function (e) {\n      e = e || window.event;\n\n      switch (e.keyCode) {\n        case 38:\n          _this.setState({\n            direction: 'UP'\n          });\n\n          break;\n\n        case 40:\n          _this.setState({\n            direction: 'DOWN'\n          });\n\n          break;\n\n        case 37:\n          _this.setState({\n            direction: 'LEFT'\n          });\n\n          break;\n\n        case 39:\n          _this.setState({\n            direction: 'RIGHT'\n          });\n\n          break;\n      }\n    };\n\n    _this.moveSnake = function () {\n      var dots = _toConsumableArray(_this.state.snakeDots);\n\n      var head = dots[dots.length - 1];\n\n      switch (_this.state.direction) {\n        case 'RIGHT':\n          head = [head[0] + 2, head[1]];\n          break;\n\n        case 'LEFT':\n          head = [head[0] - 2, head[1]];\n          break;\n\n        case 'DOWN':\n          head = [head[0], head[1] + 2];\n          break;\n\n        case 'UP':\n          head = [head[0], head[1] - 2];\n          break;\n      }\n\n      dots.push(head);\n      dots.shift();\n\n      _this.setState({\n        snakeDots: dots\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setInterval(this.moveSnake, this.state.speed);\n      document.onkeydown = this.onKeyDown;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.checkIfOutOfBorders();\n      this.checkIfCollapsed();\n      this.checkIfEat();\n    }\n  }, {\n    key: \"checkIfOutOfBorders\",\n    value: function checkIfOutOfBorders() {\n      var head = this.state.snakeDots[this.state.snakeDots.length - 1];\n\n      if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n        this.onGameOver();\n      }\n    }\n  }, {\n    key: \"checkIfCollapsed\",\n    value: function checkIfCollapsed() {\n      var _this2 = this;\n\n      var snake = _toConsumableArray(this.state.snakeDots);\n\n      var head = snake[snake.length - 1];\n      snake.pop();\n      snake.forEach(function (dot) {\n        if (head[0] == dot[0] && head[1] == dot[1]) {\n          _this2.onGameOver();\n        }\n      });\n    }\n  }, {\n    key: \"checkIfEat\",\n    value: function checkIfEat() {\n      var head = this.state.snakeDots[this.state.snakeDots.length - 1];\n      var food = this.state.food;\n\n      if (head[0] == food[0] && head[1] == food[1]) {\n        this.setState({\n          food: getRandomCoordinates()\n        });\n        this.enlargeSnake();\n        this.increaseSpeed();\n      }\n    }\n  }, {\n    key: \"enlargeSnake\",\n    value: function enlargeSnake() {\n      var newSnake = _toConsumableArray(this.state.snakeDots);\n\n      newSnake.unshift([]);\n      this.setState({\n        snakeDots: newSnake\n      });\n    }\n  }, {\n    key: \"increaseSpeed\",\n    value: function increaseSpeed() {\n      if (this.state.speed > 10) {\n        this.setState({\n          speed: this.state.speed - 10\n        });\n      }\n    }\n  }, {\n    key: \"onGameOver\",\n    value: function onGameOver() {\n      console.log(\"Game Over. Snake length is \".concat(this.state.snakeDots.length));\n      this.setState(initialState);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"body\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Phone, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"screen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-area\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Snake, {\n        snakeDots: this.state.snakeDots,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(Food, {\n        dot: this.state.food,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        id: \"live-score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Score \", this.state.snakeDots.length - 2))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/chris/Downloads/react-hour-projects-master/snake-game/src/App.js"],"names":["React","Component","Snake","Food","Phone","getRandomCoordinates","min","max","x","Math","floor","random","y","initialState","food","speed","direction","snakeDots","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","dot","enlargeSnake","increaseSpeed","newSnake","unshift","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\nimport Phone from './phoneColor';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y =  Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x,y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 200,\n  direction: 'RIGHT',\n  snakeDots: [\n    [0,0],\n    [2,0]\n  ]\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameOver() {\n    console.log(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n\n  render() {\n    return (\n      <body>      \n<Phone />\n      <div className=\"screen\">\n        <div className=\"game-area\">\n          <Snake snakeDots={this.state.snakeDots}/>\n          <Food dot={this.state.food}/>\n                  <p id=\"live-score\">Score {this.state.snakeDots.length -2}</p> \n\n        </div>\n      </div>\n      </body>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}